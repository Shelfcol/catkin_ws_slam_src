#include <ros/ros.h>
#include <ros/console.h>
#include <nav_msgs/Path.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/PoseStamped.h>
#include <tf/transform_broadcaster.h>
#include <tf/tf.h>
#include <turtlesim/Pose.h>
#include <oxford_gps_eth/pos_info.h>
#include <oxford_gps_eth/pos_xy.h>
#include "showpath/geo.h"
class SubscribeAndPublish
{
    public:
      SubscribeAndPublish()
      {
         path_pub = nh.advertise<nav_msgs::Path>("path",1,true);
         //path_sub = nh.subscribe("turtle1/pose",1000,&SubscribeAndPublish::callback,this);
         path_sub = nh.subscribe("oxford_gps_eth/pos_info",1000,&SubscribeAndPublish::callback,this);
      }
      void callback(const turtlesim::Pose &msg)
      {
           geometry_msgs::PoseStamped this_pose_stamped;
           this_pose_stamped.pose.position.x = msg.x;
           this_pose_stamped.pose.position.y = msg.y;
       
           geometry_msgs::Quaternion goal_quat = tf::createQuaternionMsgFromYaw(msg.theta);
           this_pose_stamped.pose.orientation.x = goal_quat.x;
           this_pose_stamped.pose.orientation.y = goal_quat.y;
           this_pose_stamped.pose.orientation.z = goal_quat.z;
           this_pose_stamped.pose.orientation.w = goal_quat.w;

           current_time = ros::Time::now();
           this_pose_stamped.header.stamp = current_time;
           this_pose_stamped.header.frame_id = "odom";
           
           path.header.stamp = current_time;
           path.header.frame_id = "odom";
           path.poses.push_back(this_pose_stamped);

           path_pub.publish(path);
      }
    private:
      ros::NodeHandle nh;
      ros::Publisher path_pub;
      ros::Subscriber path_sub;
      ros::Time current_time;
      nav_msgs::Path path;
};


	pcl::PointXYZ convert_lat2xy(InsMsg::ins_p2 data) //存放的x=lat，y=lon，z没关系
	{
		float R0 = 6378137.0;
		float e = 0.0818191908425;

		float L0 = global_origin_lat;
		float lamda0 = global_origin_lon;
		float hb = 0.0;
		float RE0 = R0 / (sqrt(1.0 - e * e * sin(L0 * M_PI / 180) * sin(L0 * M_PI / 180.0)));
		float x0 = (RE0 + hb) * cos(L0 * M_PI / 180.0) * cos(lamda0 * M_PI / 180.0);
		float y0 = (RE0 + hb) * cos(L0 * M_PI / 180.0) * sin(lamda0 * M_PI / 180.0);
		float z0 = ((1.0 - e * e) * RE0 + hb) * sin(L0 * M_PI / 180.0);

		float L = data.Lat;
		float lamda = data.Lon;
		float h = data.Altitude;
		float RE = R0 / (sqrt(1.0 - e * e * sin(L * M_PI / 180.0) * sin(L * M_PI / 180.0)));
		float x = (RE + h) * cos(L * M_PI / 180.0) * cos(lamda * M_PI / 180.0);
		float y = (RE + h) * cos(L * M_PI / 180.0) * sin(lamda * M_PI / 180.0);
		float z = ((1.0 - e * e) * RE + h) * sin(L * M_PI / 180.0);

		float dx = x - x0;
		float dy = y - y0;
		float dz = z - z0;

		float dn = -sin(L * M_PI / 180.0) * cos(lamda * M_PI / 180.0) * dx - sin(L * M_PI / 180.0) * sin(lamda * M_PI / 180.0) * dy + cos(L * M_PI / 180.0) * dz;
		float de = -sin(lamda * M_PI / 180.0) * dx + cos(lamda * M_PI / 180.0) * dy;
		float dd = -cos(L * M_PI / 180.0) * cos(lamda * M_PI / 180.0) * dx - cos(L * M_PI / 180.0) * sin(lamda * M_PI / 180.0) * dy - sin(L * M_PI / 180.0) * dz;

		dn = dn; //惯导处在全局坐标系下的坐标
		float dw = -de;
		pcl::PointXYZ p_tmp = pcl::PointXYZ(dn, dw, 0.0);

		return p_tmp;
	}



int main(int argc,char** argv)
{
    ros::init(argc,argv,"showpath");

    SubscribeAndPublish SAPObject;
    ros::spin();
    return 0;
}
